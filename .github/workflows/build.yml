name: Build and Push Docker Image

on:
  schedule:
    # Run every midnight UTC
    - cron: '0 0 * * *'
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  DOCKER_REGISTRY: docker.io
  GHCR_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: zuptalo/tailscaled-yt-dlp
  GHCR_IMAGE_NAME: ghcr.io/${{ github.repository }}

jobs:
  check-base-image:
    runs-on: ubuntu-latest
    outputs:
      build_needed: ${{ steps.check.outputs.build_needed }}
    permissions:
      contents: write
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Check base image changes
      id: check
      run: |
        # Install jq for JSON parsing
        sudo apt-get update && sudo apt-get install -y jq
        
        # Make script executable and run
        chmod +x check-base-image.sh
        ./check-base-image.sh
        
    - name: Commit digest changes
      if: steps.check.outputs.build_needed == 'true' && github.event_name != 'pull_request'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add base-image-digest.txt
        git diff --staged --quiet || git commit -m "Update base image digest [skip ci]"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push:
    runs-on: ubuntu-latest
    needs: check-base-image
    if: needs.check-base-image.outputs.build_needed == 'true' || github.event_name == 'push' || github.event_name == 'pull_request'
    permissions:
      contents: write
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.GHCR_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Generate build info
      id: build_info
      run: |
        DATE_TAG=$(date +%Y%m%d)
        echo "date_tag=$DATE_TAG" >> $GITHUB_OUTPUT
        echo "build_date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
        echo "git_sha=${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

    - name: Extract metadata for Docker Hub
      id: meta_docker
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.build_info.outputs.date_tag }},enable={{is_default_branch}}

    - name: Extract metadata for GHCR
      id: meta_ghcr
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.GHCR_IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=raw,value=latest,enable={{is_default_branch}}
          type=raw,value=${{ steps.build_info.outputs.date_tag }},enable={{is_default_branch}}

    - name: Build and push to Docker Hub
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_docker.outputs.tags }}
        labels: ${{ steps.meta_docker.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push to GHCR
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta_ghcr.outputs.tags }}
        labels: ${{ steps.meta_ghcr.outputs.labels }}
        cache-from: type=gha

    - name: Create git tag and release
      if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main' && needs.check-base-image.outputs.build_needed == 'true'
      run: |
        # Configure git
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        
        # Create tag
        TAG_NAME="v${{ steps.build_info.outputs.date_tag }}"
        git tag -a "$TAG_NAME" -m "Automated build $TAG_NAME - Base image updated"
        git push origin "$TAG_NAME"
        
        # Create release notes
        RELEASE_NOTES=$(cat << 'EOF'
        ## 🚀 Automated Build - ${{ steps.build_info.outputs.date_tag }}
        
        **Base Image Update Detected** 📦
        
        This release was automatically generated due to updates in the base image `ghcr.io/jauderho/yt-dlp:latest`.
        
        ### 📋 Build Information
        - **Build Date:** ${{ steps.build_info.outputs.build_date }}
        - **Git SHA:** ${{ steps.build_info.outputs.git_sha }}
        - **Base Image:** `ghcr.io/jauderho/yt-dlp:latest`
        
        ### 🏷️ Available Tags
        - `zuptalo/tailscaled-yt-dlp:latest`
        - `zuptalo/tailscaled-yt-dlp:${{ steps.build_info.outputs.date_tag }}`
        - `ghcr.io/${{ github.repository }}:latest`
        - `ghcr.io/${{ github.repository }}:${{ steps.build_info.outputs.date_tag }}`
        
        ### 🛠️ Usage
        ```yaml
        services:
          tailscaled-yt-dlp:
            image: zuptalo/tailscaled-yt-dlp:${{ steps.build_info.outputs.date_tag }}
            # ... rest of your configuration
        ```
        
        ### 📚 Documentation
        See [README.md](README.md) for full setup and usage instructions.
        EOF
        )
        
        # Create GitHub release
        gh release create "$TAG_NAME" \
          --title "Automated Build ${{ steps.build_info.outputs.date_tag }}" \
          --notes "$RELEASE_NOTES" \
          --generate-notes
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}